Table: Activity

+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| player_id    | int     |
| device_id    | int     |
| event_date   | date    |
| games_played | int     |
+--------------+---------+
(player_id, event_date) is the primary key (combination of columns with unique values) of this table.
This table shows the activity of players of some games.
Each row is a record of a player who logged in and played a number of games (possibly 0) before logging out on someday using some device.
 

Write a solution to find the first login date for each player.

Return the result table in any order.

The result format is in the following example.

 

Example 1:

Input: 
Activity table:
+-----------+-----------+------------+--------------+
| player_id | device_id | event_date | games_played |
+-----------+-----------+------------+--------------+
| 1         | 2         | 2016-03-01 | 5            |
| 1         | 2         | 2016-05-02 | 6            |
| 2         | 3         | 2017-06-25 | 1            |
| 3         | 1         | 2016-03-02 | 0            |
| 3         | 4         | 2018-07-03 | 5            |
+-----------+-----------+------------+--------------+
Output: 
+-----------+-------------+
| player_id | first_login |
+-----------+-------------+
| 1         | 2016-03-01  |
| 2         | 2017-06-25  |
| 3         | 2016-03-02  |
+-----------+-------------+

SOLUTION:

SELECT
    player_id,
    MIN(event_date) AS first_login
FROM 
    activity
GROUP BY
    player_id
ORDER BY
    event_date ASC
		
----------------------------------------------------------------------------------------
SELECT 
    player_id,
    first_login
FROM (
    SELECT 
        player_id, 
        event_date AS first_login,
        DENSE_RANK() OVER (PARTITION BY player_id ORDER BY event_date) AS ranking
    FROM Activity
) AS a
WHERE 
    ranking = 1;

----------------------------------------------------------------------------------------
WITH CTE AS(
    SELECT
        player_id,
        event_date AS first_login,
        DENSE_RANK() OVER(PARTITION BY player_id ORDER BY event_date) AS ranking
    FROM
        activity
)

SELECT 
    player_id,
    first_login
FROM 
    CTE
WHERE 
    ranking = 1

----------------------------------------------------------------------------------------
def game_analysis(activity: pd.DataFrame) -> pd.DataFrame:
    df = activity.groupby('player_id')['event_date'].first().reset_index()
    df = df.rename(columns={'event_date':'first_login'})

    return df
		
----------------------------------------------------------------------------------------
def game_analysis(activity: pd.DataFrame) -> pd.DataFrame:
    # Sort the DataFrame by player_id and event_date
    activity = activity.sort_values(by=['player_id', 'event_date'])
    
    # Group by player_id and select the minimum event_date for each player
    result = activity.groupby('player_id')['event_date'].min().reset_index()
    result.rename(columns={'event_date': 'first_login'}, inplace=True)
    
    return result

----------------------------------------------------------------------------------------
def game_analysis(activity: pd.DataFrame) -> pd.DataFrame:
    df = activity.sort_values(by = ['player_id', 'event_date']).groupby('player_id', as_index = False)['event_date'].first()

    return df.rename(columns = {'event_date':'first_login'})
    
